package com.ryanharter.auto.value.gson;

import com.google.auto.value.processor.AutoValueProcessor;
import com.google.common.collect.ImmutableSet;
import com.google.testing.compile.JavaFileObjects;
import java.util.Arrays;
import javax.tools.JavaFileObject;
import org.junit.Before;
import org.junit.Test;

import static com.google.common.truth.Truth.assertAbout;
import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static com.ryanharter.auto.value.gson.AutoValueGsonExtension.COLLECTIONS_DEFAULT_TO_EMPTY;

public class AutoValueGsonExtensionTest {

  private JavaFileObject nullable;

  @Before
  public void setup() {
    nullable = JavaFileObjects.forSourceString("com.ryanharter.auto.value.gson.Nullable", ""
        + "package com.ryanharter.auto.value.gson;\n"
        + "import java.lang.annotation.Retention;\n"
        + "import java.lang.annotation.Target;\n"
        + "import static java.lang.annotation.ElementType.METHOD;\n"
        + "import static java.lang.annotation.ElementType.PARAMETER;\n"
        + "import static java.lang.annotation.ElementType.FIELD;\n"
        + "import static java.lang.annotation.RetentionPolicy.SOURCE;\n"
        + "@Retention(SOURCE)\n"
        + "@Target({METHOD, PARAMETER, FIELD})\n"
        + "public @interface Nullable {\n"
        + "}");
  }

  @Test
  public void simple() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.gson.annotations.SerializedName;\n"
        + "import com.ryanharter.auto.value.gson.GsonTypeAdapter;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.common.collect.ImmutableMap;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.TypeAdapterFactory;\n"
        + "import com.google.gson.reflect.TypeToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import java.io.IOException;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static TypeAdapter<Test> typeAdapter(Gson gson) {\n"
        + "    return new AutoValue_Test.GsonTypeAdapter(gson);\n"
        + "  }\n"
        // Reference type
        + "public abstract String a();\n"
        // Array type
        + "public abstract int[] b();\n"
        // Primitive type
        + "public abstract int c();\n"
        // SerializedName
        + "@SerializedName(\"_D\") public abstract String d();\n"
        // Nullable type
        + "@Nullable abstract String e();\n"
        // Parametrized type, multiple parameters
        + "public abstract ImmutableMap<String, Number> f();\n"
        // Parametrized type, single parameter
        + "public abstract Set<String> g();\n"
        // Nested parameterized type
        + "public abstract Map<String, Set<String>> h();\n"
        // SerializedName with alternate
        + "@SerializedName(value = \"_I\", alternate = {\"_I_1\", \"_I_2\"}) public abstract String i();\n"
        // Nullable collection type
        + "@Nullable public abstract List<String> j();\n"
        // Custom adapter
        + "@GsonTypeAdapter(TestTypeAdapter.class) public abstract String k();\n"
        // Custom adapter with generics
        + "@GsonTypeAdapter(TestListTypeAdapter.class) public abstract List<String> l();\n"
        // Custom adapter factory
        + "@GsonTypeAdapter(TestTypeAdapterFactory.class) public abstract String m();\n"
        // Custom adapter factory with generics
        + "@GsonTypeAdapter(TestTypeAdapterFactory.class) public abstract List<String> n();\n"
        // Deeply nested parameterized type
        + "public abstract Map<String, Map<String, Map<String, Map<String, Map<String, String>>>>> o();\n" +
        "  @AutoValue.Builder public static abstract class Builder {\n" +
        "    public abstract Builder a(String a);\n" +
        "    public abstract Builder b(int[] b);\n" +
        "    public abstract Builder c(int c);\n" +
        "    public abstract Builder d(String d);\n" +
        "    public abstract Builder e(String e);\n" +
        "    public abstract Builder f(ImmutableMap<String, Number> f);\n" +
        "    public abstract Builder g(Set<String> g);\n" +
        "    public abstract Builder h(Map<String, Set<String>> h);\n" +
        "    public abstract Builder i(String i);\n" +
        "    public abstract Builder j(List<String> j);\n" +
        "    public abstract Builder k(String k);\n" +
        "    public abstract Builder l(List<String> l);\n" +
        "    public abstract Builder m(String m);\n" +
        "    public abstract Builder n(List<String> n);\n" +
        "    public abstract Builder o(Map<String, Map<String, Map<String, Map<String, Map<String, String>>>>> o);\n" +
        "    public abstract Test build();\n" +
        "  }\n" +
        "  public static class TestTypeAdapter extends TypeAdapter<String> {\n" +
        "    @Override public void write(JsonWriter out, String value) throws IOException {}\n" +
        "    @Override public String read(JsonReader in) throws IOException { return null; }\n" +
        "  }\n" +
        "  public static class TestListTypeAdapter extends TypeAdapter<List<String>> {\n" +
        "    @Override public void write(JsonWriter out, List<String> value) throws IOException {}\n" +
        "    @Override public List<String> read(JsonReader in) throws IOException { return null; }\n" +
        "  }\n" +
        "  public static class TestTypeAdapterFactory implements TypeAdapterFactory {\n" +
        "    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) { return null; }\n" +
        "  }\n"
        + "}\n"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.common.collect.ImmutableMap;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Number;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.util.Collections;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String a, int[] b, int c, String d, @Nullable String e,\n"
        + "      ImmutableMap<String, Number> f, Set<String> g, Map<String, Set<String>> h, String i,\n"
        + "      @Nullable List<String> j, String k, List<String> l, String m, List<String> n,\n"
        + "      Map<String, Map<String, Map<String, Map<String, Map<String, String>>>>> o) {\n"
        + "    super(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter extends TypeAdapter<Test> {\n"
        + "    private final Gson gson;\n"
        + "    public GsonTypeAdapter(Gson gson) {\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Test object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"a\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.a());\n"
        + "      jsonWriter.name(\"b\");\n"
        + "      (gson.getAdapter(int[].class)).write(jsonWriter, object.b());\n"
        + "      jsonWriter.name(\"c\");\n"
        + "      (gson.getAdapter(java.lang.Integer.class)).write(jsonWriter, object.c());\n"
        + "      jsonWriter.name(\"_D\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.d());\n"
        + "      jsonWriter.name(\"e\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.e());\n"
        + "      jsonWriter.name(\"f\");\n"
        + "      ((com.google.gson.TypeAdapter<com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Number>>) "
        + "gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized(com.google.common.collect.ImmutableMap.class, "
        + "java.lang.String.class, java.lang.Number.class))).write(jsonWriter, object.f());\n"
        + "      jsonWriter.name(\"g\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Set<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken"
        + ".getParameterized(java.util.Set.class, java.lang.String.class))).write(jsonWriter, object.g());\n"
        + "      jsonWriter.name(\"h\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect"
        + ".TypeToken.getParameterized(java.util.Set.class, java.lang.String.class).getType()))).write(jsonWriter, object.h());\n"
        + "      jsonWriter.name(\"_I\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.i());\n"
        + "      jsonWriter.name(\"j\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken"
        + ".getParameterized(java.util.List.class, java.lang.String.class))).write(jsonWriter, object.j());\n"
        + "      jsonWriter.name(\"k\");\n"
        + "      (new test.Test.TestTypeAdapter()).write(jsonWriter, object.k());\n"
        + "      jsonWriter.name(\"l\");\n"
        + "      (new test.Test.TestListTypeAdapter()).write(jsonWriter, object.l());\n"
        + "      jsonWriter.name(\"m\");\n"
        + "      (new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken.get(java.lang.String.class)))"
        + ".write(jsonWriter, object.m());\n"
        + "      jsonWriter.name(\"n\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) new test.Test.TestTypeAdapterFactory().create"
        + "(gson, com.google.gson.reflect.TypeToken.getParameterized(java.util.List.class, java.lang.String.class))).write(jsonWriter, object.n());\n"
        + "      jsonWriter.name(\"o\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.String, "
        + "java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>>>>>) gson.getAdapter(com.google.gson.reflect"
        + ".TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, "
        + "com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Map.class, java.lang.String.class, java.lang.String.class).getType()).getType()).getType()).getType()))).write(jsonWriter, object.o());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      String a = null;\n"
        + "      int[] b = null;\n"
        + "      int c = 0;\n"
        + "      String d = null;\n"
        + "      String e = null;\n"
        + "      ImmutableMap<String, Number> f = ImmutableMap.of();\n"
        + "      Set<String> g = Collections.emptySet();\n"
        + "      Map<String, Set<String>> h = Collections.emptyMap();\n"
        + "      String i = null;\n"
        + "      List<String> j = null;\n"
        + "      String k = null;\n"
        + "      List<String> l = Collections.emptyList();\n"
        + "      String m = null;\n"
        + "      List<String> n = Collections.emptyList();\n"
        + "      Map<String, Map<String, Map<String, Map<String, Map<String, String>>>>> o = Collections.emptyMap();\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"a\": {\n"
        + "            a = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"b\": {\n"
        + "            b = (gson.getAdapter(int[].class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"c\": {\n"
        + "            c = (gson.getAdapter(java.lang.Integer.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"_D\": {\n"
        + "            d = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"e\": {\n"
        + "            e = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"f\": {\n"
        + "            f = ((com.google.gson.TypeAdapter<com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Number>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(com.google.common.collect.ImmutableMap.class, java.lang.String.class, "
        + "java.lang.Number.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"g\": {\n"
        + "            g = ((com.google.gson.TypeAdapter<java.util.Set<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken"
        + ".getParameterized(java.util.Set.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"h\": {\n"
        + "            h = ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken"
        + ".getParameterized(java.util.Set.class, java.lang.String.class).getType()))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"_I_1\":\n"
        + "          case \"_I_2\":\n"
        + "          case \"_I\": {\n"
        + "            i = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"j\": {\n"
        + "            j = ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken"
        + ".getParameterized(java.util.List.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"k\": {\n"
        + "            k = (new test.Test.TestTypeAdapter()).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"l\": {\n"
        + "            l = (new test.Test.TestListTypeAdapter()).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"m\": {\n"
        + "            m = (new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken.get(java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"n\": {\n"
        + "            n = ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) new test.Test.TestTypeAdapterFactory().create"
        + "(gson, com.google.gson.reflect.TypeToken.getParameterized(java.util.List.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"o\": {\n"
        + "            o = ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.String, "
        + "java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>>>>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, "
        + "com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, "
        + "java.lang.String.class).getType()).getType()).getType()).getType()))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Test(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSources())
        .that(Arrays.asList(nullable, source))
        .withCompilerOptions("-A" + COLLECTIONS_DEFAULT_TO_EMPTY + "=true")
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void simpleNoEmpty() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.gson.annotations.SerializedName;\n"
        + "import com.ryanharter.auto.value.gson.GsonTypeAdapter;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.common.collect.ImmutableMap;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.TypeAdapterFactory;\n"
        + "import com.google.gson.reflect.TypeToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import java.io.IOException;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static TypeAdapter<Test> typeAdapter(Gson gson) {\n"
        + "    return new AutoValue_Test.GsonTypeAdapter(gson);\n"
        + "  }\n"
        // Reference type
        + "public abstract String a();\n"
        // Array type
        + "public abstract int[] b();\n"
        // Primitive type
        + "public abstract int c();\n"
        // SerializedName
        + "@SerializedName(\"_D\") public abstract String d();\n"
        // Nullable type
        + "@Nullable abstract String e();\n"
        // Parametrized type, multiple parameters
        + "public abstract ImmutableMap<String, Number> f();\n"
        // Parametrized type, single parameter
        + "public abstract Set<String> g();\n"
        // Nested parameterized type
        + "public abstract Map<String, Set<String>> h();\n"
        // SerializedName with alternate
        + "@SerializedName(value = \"_I\", alternate = {\"_I_1\", \"_I_2\"}) public abstract String i();\n"
        // Nullable collection type
        + "@Nullable public abstract List<String> j();\n"
        // Custom adapter
        + "@GsonTypeAdapter(TestTypeAdapter.class) public abstract String k();\n"
        // Custom adapter with generics
        + "@GsonTypeAdapter(TestListTypeAdapter.class) public abstract List<String> l();\n"
        // Custom adapter factory
        + "@GsonTypeAdapter(TestTypeAdapterFactory.class) public abstract String m();\n"
        // Custom adapter factory with generics
        + "@GsonTypeAdapter(TestTypeAdapterFactory.class) public abstract List<String> n();\n" +
        "  @AutoValue.Builder public static abstract class Builder {\n" +
        "    public abstract Builder a(String a);\n" +
        "    public abstract Builder b(int[] b);\n" +
        "    public abstract Builder c(int c);\n" +
        "    public abstract Builder d(String d);\n" +
        "    public abstract Builder e(String e);\n" +
        "    public abstract Builder f(ImmutableMap<String, Number> f);\n" +
        "    public abstract Builder g(Set<String> g);\n" +
        "    public abstract Builder h(Map<String, Set<String>> h);\n" +
        "    public abstract Builder i(String i);\n" +
        "    public abstract Builder j(List<String> j);\n" +
        "    public abstract Builder k(String k);\n" +
        "    public abstract Builder l(List<String> l);\n" +
        "    public abstract Builder m(String m);\n" +
        "    public abstract Builder n(List<String> n);\n" +
        "    public abstract Test build();\n" +
        "  }\n" +
        "  public static class TestTypeAdapter extends TypeAdapter<String> {\n" +
        "    @Override public void write(JsonWriter out, String value) throws IOException {}\n" +
        "    @Override public String read(JsonReader in) throws IOException { return null; }\n" +
        "  }\n" +
        "  public static class TestListTypeAdapter extends TypeAdapter<List<String>> {\n" +
        "    @Override public void write(JsonWriter out, List<String> value) throws IOException {}\n" +
        "    @Override public List<String> read(JsonReader in) throws IOException { return null; }\n" +
        "  }\n" +
        "  public static class TestTypeAdapterFactory implements TypeAdapterFactory {\n" +
        "    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) { return null; }\n" +
        "  }\n"
        + "}\n"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.common.collect.ImmutableMap;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Number;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String a, int[] b, int c, String d, @Nullable String e,\n"
        + "      ImmutableMap<String, Number> f, Set<String> g, Map<String, Set<String>> h, String i,\n"
        + "      @Nullable List<String> j, String k, List<String> l, String m, List<String> n) {\n"
        + "    super(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter extends TypeAdapter<Test> {\n"
        + "    private final Gson gson;\n"
        + "    public GsonTypeAdapter(Gson gson) {\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Test object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"a\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.a());\n"
        + "      jsonWriter.name(\"b\");\n"
        + "      (gson.getAdapter(int[].class)).write(jsonWriter, object.b());\n"
        + "      jsonWriter.name(\"c\");\n"
        + "      (gson.getAdapter(java.lang.Integer.class)).write(jsonWriter, object.c());\n"
        + "      jsonWriter.name(\"_D\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.d());\n"
        + "      jsonWriter.name(\"e\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.e());\n"
        + "      jsonWriter.name(\"f\");\n"
        + "      ((com.google.gson.TypeAdapter<com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Number>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(com.google.common.collect.ImmutableMap.class, java.lang.String.class, "
        + "java.lang.Number.class))).write(jsonWriter, object.f());\n"
        + "      jsonWriter.name(\"g\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Set<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class))).write(jsonWriter, object.g());\n"
        + "      jsonWriter.name(\"h\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class).getType()))).write(jsonWriter, object.h());\n"
        + "      jsonWriter.name(\"_I\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.i());\n"
        + "      jsonWriter.name(\"j\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.List.class, java.lang.String.class))).write(jsonWriter, object.j());\n"
        + "      jsonWriter.name(\"k\");\n"
        + "      (new test.Test.TestTypeAdapter()).write(jsonWriter, object.k());\n"
        + "      jsonWriter.name(\"l\");\n"
        + "      (new test.Test.TestListTypeAdapter()).write(jsonWriter, object.l());\n"
        + "      jsonWriter.name(\"m\");\n"
        + "      (new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken.get(java.lang.String.class))).write(jsonWriter, object.m());\n"
        + "      jsonWriter.name(\"n\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken"
        + ".getParameterized(java.util.List.class, java.lang.String.class))).write(jsonWriter, object.n());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      String a = null;\n"
        + "      int[] b = null;\n"
        + "      int c = 0;\n"
        + "      String d = null;\n"
        + "      String e = null;\n"
        + "      ImmutableMap<String, Number> f = null;\n"
        + "      Set<String> g = null;\n"
        + "      Map<String, Set<String>> h = null;\n"
        + "      String i = null;\n"
        + "      List<String> j = null;\n"
        + "      String k = null;\n"
        + "      List<String> l = null;\n"
        + "      String m = null;\n"
        + "      List<String> n = null;\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"a\": {\n"
        + "            a = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"b\": {\n"
        + "            b = (gson.getAdapter(int[].class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"c\": {\n"
        + "            c = (gson.getAdapter(java.lang.Integer.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"_D\": {\n"
        + "            d = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"e\": {\n"
        + "            e = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"f\": {\n"
        + "            f = ((com.google.gson.TypeAdapter<com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Number>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(com.google.common.collect.ImmutableMap.class, java.lang.String.class, "
        + "java.lang.Number.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"g\": {\n"
        + "            g = ((com.google.gson.TypeAdapter<java.util.Set<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"h\": {\n"
        + "            h = ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class).getType()))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"_I_1\":\n"
        + "          case \"_I_2\":\n"
        + "          case \"_I\": {\n"
        + "            i = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"j\": {\n"
        + "            j = ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.List.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"k\": {\n"
        + "            k = (new test.Test.TestTypeAdapter()).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"l\": {\n"
        + "            l = (new test.Test.TestListTypeAdapter()).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"m\": {\n"
        + "            m = (new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken.get(java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"n\": {\n"
        + "            n = ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) new test.Test.TestTypeAdapterFactory().create"
        + "(gson, com.google.gson.reflect.TypeToken.getParameterized(java.util.List.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Test(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSources())
        .that(Arrays.asList(nullable, source))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void simpleWithDefaults() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.gson.annotations.SerializedName;\n"
        + "import com.ryanharter.auto.value.gson.GsonTypeAdapter;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.common.collect.ImmutableMap;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.TypeAdapterFactory;\n"
        + "import com.google.gson.reflect.TypeToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import java.io.IOException;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static TypeAdapter<Test> typeAdapter(Gson gson) {\n"
        + "    return new AutoValue_Test.GsonTypeAdapter(gson);\n"
        + "  }\n"
        // Reference type
        + "public abstract String a();\n"
        // Array type
        + "public abstract int[] b();\n"
        // Primitive type
        + "public abstract int c();\n"
        // SerializedName
        + "@SerializedName(\"_D\") public abstract String d();\n"
        // Nullable type
        + "@Nullable abstract String e();\n"
        // Parametrized type, multiple parameters
        + "public abstract ImmutableMap<String, Number> f();\n"
        // Parametrized type, single parameter
        + "public abstract Set<String> g();\n"
        // Nested parameterized type
        + "public abstract Map<String, Set<String>> h();\n"
        // SerializedName with alternate
        + "@SerializedName(value = \"_I\", alternate = {\"_I_1\", \"_I_2\"}) public abstract String i();\n"
        // Nullable collection type
        + "@Nullable public abstract List<String> j();\n"
        // Custom adapter
        + "@GsonTypeAdapter(TestTypeAdapter.class) public abstract String k();\n"
        // Custom adapter with generics
        + "@GsonTypeAdapter(TestListTypeAdapter.class) public abstract List<String> l();\n"
        // Custom adapter factory
        + "@GsonTypeAdapter(TestTypeAdapterFactory.class) public abstract String m();\n"
        // Custom adapter factory with generics
        + "@GsonTypeAdapter(TestTypeAdapterFactory.class) public abstract List<String> n();\n" +
        "  @AutoValue.Builder public static abstract class Builder {\n" +
        "    public abstract Builder a(String a);\n" +
        "    public abstract Builder b(int[] b);\n" +
        "    public abstract Builder c(int c);\n" +
        "    public abstract Builder d(String d);\n" +
        "    public abstract Builder e(String e);\n" +
        "    public abstract Builder f(ImmutableMap<String, Number> f);\n" +
        "    public abstract Builder g(Set<String> g);\n" +
        "    public abstract Builder h(Map<String, Set<String>> h);\n" +
        "    public abstract Builder i(String i);\n" +
        "    public abstract Builder j(List<String> j);\n" +
        "    public abstract Builder k(String k);\n" +
        "    public abstract Builder l(List<String> l);\n" +
        "    public abstract Builder m(String m);\n" +
        "    public abstract Builder n(List<String> n);\n" +
        "    public abstract Test build();\n" +
        "  }\n" +
        "  public static class TestTypeAdapter extends TypeAdapter<String> {\n" +
        "    @Override public void write(JsonWriter out, String value) throws IOException {}\n" +
        "    @Override public String read(JsonReader in) throws IOException { return null; }\n" +
        "  }\n" +
        "  public static class TestListTypeAdapter extends TypeAdapter<List<String>> {\n" +
        "    @Override public void write(JsonWriter out, List<String> value) throws IOException {}\n" +
        "    @Override public List<String> read(JsonReader in) throws IOException { return null; }\n" +
        "  }\n" +
        "  public static class TestTypeAdapterFactory implements TypeAdapterFactory {\n" +
        "    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) { return null; }\n" +
        "  }\n"
        + "}\n"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.common.collect.ImmutableMap;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Number;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String a, int[] b, int c, String d, @Nullable String e,\n"
        + "      ImmutableMap<String, Number> f, Set<String> g, Map<String, Set<String>> h, String i,\n"
        + "      @Nullable List<String> j, String k, List<String> l, String m, List<String> n) {\n"
        + "    super(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter extends TypeAdapter<Test> {\n"
        + "    private final Gson gson;\n"
        + "    private String defaultA = null;\n"
        + "    private int[] defaultB = null;\n"
        + "    private int defaultC = 0;\n"
        + "    private String defaultD = null;\n"
        + "    private String defaultE = null;\n"
        + "    private ImmutableMap<String, Number> defaultF = null;\n"
        + "    private Set<String> defaultG = null;\n"
        + "    private Map<String, Set<String>> defaultH = null;\n"
        + "    private String defaultI = null;\n"
        + "    private List<String> defaultJ = null;\n"
        + "    private String defaultK = null;\n"
        + "    private List<String> defaultL = null;\n"
        + "    private String defaultM = null;\n"
        + "    private List<String> defaultN = null;\n"
        + "    public GsonTypeAdapter(Gson gson) {\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Test object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"a\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.a());\n"
        + "      jsonWriter.name(\"b\");\n"
        + "      (gson.getAdapter(int[].class)).write(jsonWriter, object.b());\n"
        + "      jsonWriter.name(\"c\");\n"
        + "      (gson.getAdapter(java.lang.Integer.class)).write(jsonWriter, object.c());\n"
        + "      jsonWriter.name(\"_D\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.d());\n"
        + "      jsonWriter.name(\"e\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.e());\n"
        + "      jsonWriter.name(\"f\");\n"
        + "      ((com.google.gson.TypeAdapter<com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Number>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(com.google.common.collect.ImmutableMap.class, java.lang.String.class, "
        + "java.lang.Number.class))).write(jsonWriter, object.f());\n"
        + "      jsonWriter.name(\"g\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Set<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class))).write(jsonWriter, object.g());\n"
        + "      jsonWriter.name(\"h\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class).getType()))).write(jsonWriter, object.h());\n"
        + "      jsonWriter.name(\"_I\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.i());\n"
        + "      jsonWriter.name(\"j\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.List.class, java.lang.String.class))).write(jsonWriter, object.j());\n"
        + "      jsonWriter.name(\"k\");\n"
        + "      (new test.Test.TestTypeAdapter()).write(jsonWriter, object.k());\n"
        + "      jsonWriter.name(\"l\");\n"
        + "      (new test.Test.TestListTypeAdapter()).write(jsonWriter, object.l());\n"
        + "      jsonWriter.name(\"m\");\n"
        + "      (new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken.get(java.lang.String.class))).write(jsonWriter, object.m());\n"
        + "      jsonWriter.name(\"n\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken"
        + ".getParameterized(java.util.List.class, java.lang.String.class))).write(jsonWriter, object.n());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      String a = this.defaultA;\n"
        + "      int[] b = this.defaultB;\n"
        + "      int c = this.defaultC;\n"
        + "      String d = this.defaultD;\n"
        + "      String e = this.defaultE;\n"
        + "      ImmutableMap<String, Number> f = this.defaultF;\n"
        + "      Set<String> g = this.defaultG;\n"
        + "      Map<String, Set<String>> h = this.defaultH;\n"
        + "      String i = this.defaultI;\n"
        + "      List<String> j = this.defaultJ;\n"
        + "      String k = this.defaultK;\n"
        + "      List<String> l = this.defaultL;\n"
        + "      String m = this.defaultM;\n"
        + "      List<String> n = this.defaultN;\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"a\": {\n"
        + "            a = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"b\": {\n"
        + "            b = (gson.getAdapter(int[].class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"c\": {\n"
        + "            c = (gson.getAdapter(java.lang.Integer.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"_D\": {\n"
        + "            d = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"e\": {\n"
        + "            e = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"f\": {\n"
        + "            f = ((com.google.gson.TypeAdapter<com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Number>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(com.google.common.collect.ImmutableMap.class, java.lang.String.class, "
        + "java.lang.Number.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"g\": {\n"
        + "            g = ((com.google.gson.TypeAdapter<java.util.Set<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"h\": {\n"
        + "            h = ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.Set.class, java.lang.String.class).getType()))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"_I_1\":\n"
        + "          case \"_I_2\":\n"
        + "          case \"_I\": {\n"
        + "            i = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"j\": {\n"
        + "            j = ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.List.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"k\": {\n"
        + "            k = (new test.Test.TestTypeAdapter()).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"l\": {\n"
        + "            l = (new test.Test.TestListTypeAdapter()).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"m\": {\n"
        + "            m = (new test.Test.TestTypeAdapterFactory().create(gson, com.google.gson.reflect.TypeToken.get(java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"n\": {\n"
        + "            n = ((com.google.gson.TypeAdapter<java.util.List<java.lang.String>>) new test.Test.TestTypeAdapterFactory().create"
        + "(gson, com.google.gson.reflect.TypeToken.getParameterized(java.util.List.class, java.lang.String.class))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Test(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultA(String defaultA) {\n"
        + "      this.defaultA = defaultA;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultB(int[] defaultB) {\n"
        + "      this.defaultB = defaultB;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultC(int defaultC) {\n"
        + "      this.defaultC = defaultC;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultD(String defaultD) {\n"
        + "      this.defaultD = defaultD;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultE(String defaultE) {\n"
        + "      this.defaultE = defaultE;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultF(ImmutableMap<String, Number> defaultF) {\n"
        + "      this.defaultF = defaultF;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultG(Set<String> defaultG) {\n"
        + "      this.defaultG = defaultG;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultH(Map<String, Set<String>> defaultH) {\n"
        + "      this.defaultH = defaultH;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultI(String defaultI) {\n"
        + "      this.defaultI = defaultI;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultJ(List<String> defaultJ) {\n"
        + "      this.defaultJ = defaultJ;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultK(String defaultK) {\n"
        + "      this.defaultK = defaultK;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultL(List<String> defaultL) {\n"
        + "      this.defaultL = defaultL;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultM(String defaultM) {\n"
        + "      this.defaultM = defaultM;\n"
        + "      return this;\n"
        + "    }\n"
        + "    public GsonTypeAdapter setDefaultN(List<String> defaultN) {\n"
        + "      this.defaultN = defaultN;\n"
        + "      return this;\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSources())
        .that(Arrays.asList(nullable, source))
        .withCompilerOptions("-A" + AutoValueGsonExtension.MUTABLE_ADAPTERS_WITH_DEFAULT_SETTERS + "=true")
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void propertyMethodReferencedWithPrefix() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static TypeAdapter<Test> typeAdapter(Gson gson) {\n"
        + "    return new AutoValue_Test.GsonTypeAdapter(gson);\n"
        + "  }\n"
        + "  public abstract String getName();\n"
        + "  public abstract boolean isAwesome();\n"
        + "}"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String name, boolean awesome) {\n"
        + "    super(name, awesome);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter extends TypeAdapter<Test> {\n"
        + "    private final Gson gson;\n"
        + "    public GsonTypeAdapter(Gson gson) {\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Test object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"name\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.getName());\n"
        + "      jsonWriter.name(\"awesome\");\n"
        + "      (gson.getAdapter(java.lang.Boolean.class)).write(jsonWriter, object.isAwesome());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      String name = null;\n"
        + "      boolean awesome = false;\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"name\": {\n"
        + "            name = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"awesome\": {\n"
        + "            awesome = (gson.getAdapter(java.lang.Boolean.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Test(name, awesome);\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSource())
        .that(source)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }
  @Test public void handlesDefaultAccessTypeAdapterMethod() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
            + "package test;\n"
            + "import com.google.auto.value.AutoValue;\n"
            + "import com.google.gson.Gson;\n"
            + "import com.google.gson.TypeAdapter;\n"
            + "@AutoValue abstract class Test {\n"
            + "  static TypeAdapter<Test> typeAdapter(Gson gson) {\n"
            + "    return new AutoValue_Test.GsonTypeAdapter(gson);\n"
            + "  }\n"
            + "  abstract String getName();\n"
            + "  abstract boolean isAwesome();\n"
            + "}"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String name, boolean awesome) {\n"
        + "    super(name, awesome);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter extends TypeAdapter<Test> {\n"
        + "    private final Gson gson\n"
        + "    public GsonTypeAdapter(Gson gson) {\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Test object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"name\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.getName());\n"
        + "      jsonWriter.name(\"awesome\");\n"
        + "      (gson.getAdapter(java.lang.Boolean.class)).write(jsonWriter, object.isAwesome());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      String name = null;\n"
        + "      boolean awesome = false;\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"name\": {\n"
        + "            name = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"awesome\": {\n"
        + "            awesome = (gson.getAdapter(java.lang.Boolean.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Test(name, awesome);\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSource())
            .that(source)
            .processedWith(new AutoValueProcessor())
            .compilesWithoutError()
            .and()
            .generatesSources(expected);
  }

  @Test public void generatesNothingWithoutTypeAdapterMethod() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public abstract String a();\n"
        + "  public abstract boolean b();\n"
        + "}"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", ""
        + "package test;\n"
        + "\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\"com.google.auto.value.processor.AutoValueProcessor\")\n"
        + " final class AutoValue_Test extends Test {\n"
        + "\n"
        + "  private final String a;\n"
        + "  private final boolean b;\n"
        + "\n"
        + "  AutoValue_Test(\n"
        + "      String a,\n"
        + "      boolean b) {\n"
        + "    if (a == null) {\n"
        + "      throw new NullPointerException(\"Null a\");\n"
        + "    }\n"
        + "    this.a = a;\n"
        + "    this.b = b;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public String a() {\n"
        + "    return a;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public boolean b() {\n"
        + "    return b;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public String toString() {\n"
        + "    return \"Test{\"\n"
        + "        + \"a=\" + a + \", \"\n"
        + "        + \"b=\" + b\n"
        + "        + \"}\";\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public boolean equals(Object o) {\n"
        + "    if (o == this) {\n"
        + "      return true;\n"
        + "    }\n"
        + "    if (o instanceof Test) {\n"
        + "      Test that = (Test) o;\n"
        + "      return (this.a.equals(that.a()))\n"
        + "           && (this.b == that.b());\n"
        + "    }\n"
        + "    return false;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public int hashCode() {\n"
        + "    int h = 1;\n"
        + "    h *= 1000003;\n"
        + "    h ^= this.a.hashCode();\n"
        + "    h *= 1000003;\n"
        + "    h ^= this.b ? 1231 : 1237;\n"
        + "    return h;\n"
        + "  }\n"
        + "\n"
        + "}");

    assertAbout(javaSource())
        .that(source)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .withWarningCount(2)
        .and()
        .generatesSources(expected);
  }

  @Test public void emitsWarningForWrongTypeAdapterTypeArgument() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public static TypeAdapter<Bar> typeAdapter(Gson gson) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract String a();\n"
        + "  public abstract boolean b();\n"
        + "}"
    );

    JavaFileObject source2 = JavaFileObjects.forSourceString("test.Bar", ""
        + "package test;\n"
        + "public class Bar {\n"
        + "}");

    assertAbout(javaSources())
        .that(ImmutableSet.of(source1, source2))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .withWarningContaining("Found public static method returning TypeAdapter<test.Bar> on "
            + "test.Foo class. Skipping GsonTypeAdapter generation.");
  }

  @Test public void emitsWarningForNoTypeAdapterTypeArgument() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public static TypeAdapter typeAdapter(Gson gson) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract String a();\n"
        + "  public abstract boolean b();\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .withWarningContaining("Found public static method returning TypeAdapter with no type "
            + "arguments, skipping GsonTypeAdapter generation.");
  }

  @Test public void compilesWithCapitalPackageName() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("MyPackage.Foo", ""
        + "package MyPackage;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public static TypeAdapter<Foo> typeAdapter(Gson gson) {\n"
        + "    return new AutoValue_Foo.GsonTypeAdapter(gson);"
        + "  }\n"
        + "  public abstract String a();\n"
        + "  public abstract boolean b();\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .withWarningCount(2);
  }

  @Test public void generatesCorrectDefaultCharPrimitiveValue() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static TypeAdapter<Test> typeAdapter(Gson gson) {\n"
        + "    return new AutoValue_Test.GsonTypeAdapter(gson);\n"
        + "  }\n"
        + "public abstract char c();\n"
        + "}\n"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(char c) {\n"
        + "    super(c);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter extends TypeAdapter<Test> {\n"
        + "    private final Gson gson;\n"
        + "    public GsonTypeAdapter(Gson gson) {\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Test object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"c\");\n"
        + "      (gson.getAdapter(java.lang.Character.class)).write(jsonWriter, object.c());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      char c = '\\u0000';\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"c\": {\n"
        + "            c = (gson.getAdapter(java.lang.Character.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Test(c);\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSources())
      .that(Arrays.asList(nullable, source))
      .processedWith(new AutoValueProcessor())
      .compilesWithoutError()
      .and()
      .generatesSources(expected);
  }

  @Test public void handlesGenericTypes() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.reflect.TypeToken;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "@AutoValue public abstract class Foo<A, B, C> {\n"
        + "  public static <A, B, C> TypeAdapter<Foo<A, B, C>> typeAdapter(Gson gson, TypeToken<? extends Foo<A, B, C>> typeToken) {\n"
        + "    return new AutoValue_Foo.GsonTypeAdapter(gson, typeToken);"
        + "  }\n"
        + "  public abstract C c();\n"
        + "  public abstract A a();\n"
        + "  public abstract B b();\n"
        + "  public abstract List<A> list();\n"
        + "  public abstract Map<String, List<C>> map();\n"
        + "  public abstract String d();\n"
        + "}"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test.AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.reflect.TypeToken;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.reflect.ParameterizedType;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.Collections;\n"
        + "import java.util.List;\n"
        + "import java.util.Map;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Foo<A, B, C> extends $AutoValue_Foo<A, B, C> {\n"
        + "  AutoValue_Foo(C c, A a, B b, List<A> list, Map<String, List<C>> map, String d) {\n"
        + "    super(c, a, b, list, map, d);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter<A, B, C> extends TypeAdapter<Foo<A, B, C>> {\n"
        + "    private final Gson gson;\n"
        + "    private final Type[] typeArgs\n"
        + "    public GsonTypeAdapter(Gson gson, TypeToken<? extends Foo<A, B, C>> typeToken) {\n"
        + "      ParameterizedType type = (ParameterizedType) typeToken.getType();\n"
        + "      typeArgs = type.getActualTypeArguments();\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Foo<A, B, C> object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"c\");\n"
        + "      ((com.google.gson.TypeAdapter<C>) gson.getAdapter(com.google.gson.reflect.TypeToken.get(typeArgs[2])))"
        + ".write(jsonWriter, object.c());\n"
        + "      jsonWriter.name(\"a\");\n"
        + "      ((com.google.gson.TypeAdapter<A>) gson.getAdapter(com.google.gson.reflect.TypeToken.get(typeArgs[0])))"
        + ".write(jsonWriter, object.a());\n"
        + "      jsonWriter.name(\"b\");\n"
        + "      ((com.google.gson.TypeAdapter<B>) gson.getAdapter(com.google.gson.reflect.TypeToken.get(typeArgs[1])))"
        + ".write(jsonWriter, object.b());\n"
        + "      jsonWriter.name(\"list\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.List<A>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.List.class, typeArgs[0]))).write(jsonWriter, object.list());\n"
        + "      jsonWriter.name(\"map\");\n"
        + "      ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.List<C>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, "
        + "com.google.gson.reflect.TypeToken.getParameterized(java.util.List.class, typeArgs[2]).getType()))).write(jsonWriter, object.map());\n"
        + "      jsonWriter.name(\"d\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.d());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Foo<A, B, C> read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      C c = null;\n"
        + "      A a = null;\n"
        + "      B b = null;\n"
        + "      List<A> list = Collections.emptyList();\n"
        + "      Map<String, List<C>> map = Collections.emptyMap();\n"
        + "      String d = null;\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"c\": {\n"
        + "            c = ((com.google.gson.TypeAdapter<C>) gson.getAdapter(com.google.gson.reflect.TypeToken.get(typeArgs[2]))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"a\": {\n"
        + "            a = ((com.google.gson.TypeAdapter<A>) gson.getAdapter(com.google.gson.reflect.TypeToken.get(typeArgs[0]))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"b\": {\n"
        + "            b = ((com.google.gson.TypeAdapter<B>) gson.getAdapter(com.google.gson.reflect.TypeToken.get(typeArgs[1]))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"list\": {\n"
        + "            list = ((com.google.gson.TypeAdapter<java.util.List<A>>) gson.getAdapter(com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.List.class, typeArgs[0]))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"map\": {\n"
        + "            map = ((com.google.gson.TypeAdapter<java.util.Map<java.lang.String, java.util.List<C>>>) gson.getAdapter"
        + "(com.google.gson.reflect.TypeToken.getParameterized(java.util.Map.class, java.lang.String.class, com.google.gson.reflect.TypeToken.getParameterized"
        + "(java.util.List.class, typeArgs[2]).getType()))).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"d\": {\n"
        + "            d = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Foo<>(c, a, b, list, map, d);\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSource())
        .that(source1)
        .withCompilerOptions("-A" + COLLECTIONS_DEFAULT_TO_EMPTY + "=true")
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void ignoresAnnotatedFields() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.ryanharter.auto.value.gson.Ignore;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "@AutoValue public abstract class Test {\n"
        // a is not ignored, must be present in the JSON
        + "  public abstract String a();\n"
        // b is ignored for deserialization and not nullable, so a default value must be set
        + "  @Ignore(Ignore.Type.DESERIALIZATION) public abstract String b();\n"
        // c is ignored for serialization, but may be left out of the json when serializing, so no default is needed
        + "  @Ignore(Ignore.Type.SERIALIZATION) public abstract String c();\n"
        // d is ignored and not nullable, so a default value must be set
        + "  @Ignore public abstract String d();\n"
        // e is nullable and ignored, so a default value is not required
        + "  @Nullable @Ignore public abstract String e();\n"
        + "  public static TypeAdapter<Test> typeAdapter(Gson gson) {\n"
        + "    return new AutoValue_Test.GsonTypeAdapter(gson);\n"
        + "  }\n"
        + "}");

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", "package test;\n"
        + "\n"
        + "import com.google.gson.Gson;\n"
        + "import com.google.gson.TypeAdapter;\n"
        + "import com.google.gson.stream.JsonReader;\n"
        + "import com.google.gson.stream.JsonToken;\n"
        + "import com.google.gson.stream.JsonWriter;\n"
        + "import com.ryanharter.auto.value.gson.Nullable;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\n"
        + "    value = \"com.ryanharter.auto.value.gson.AutoValueGsonExtension\",\n"
        + "    comments = \"https://github.com/rharter/auto-value-gson\"\n"
        + ")\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String a, String b, String c, String d, @Nullable String e) {\n"
        + "    super(a, b, c, d, e);\n"
        + "  }\n"
        + "\n"
        + "  public static final class GsonTypeAdapter extends TypeAdapter<Test> {\n"
        + "    private final Gson gson;\n"
        + "    public GsonTypeAdapter(Gson gson) {\n"
        + "      this.gson = gson;\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void write(JsonWriter jsonWriter, Test object) throws IOException {\n"
        + "      if (object == null) {\n"
        + "        jsonWriter.nullValue();\n"
        + "        return;\n"
        + "      }\n"
        + "      jsonWriter.beginObject();\n"
        + "      jsonWriter.name(\"a\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.a());\n"
        + "      jsonWriter.name(\"b\");\n"
        + "      (gson.getAdapter(java.lang.String.class)).write(jsonWriter, object.b());\n"
        + "      jsonWriter.endObject();\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test read(JsonReader jsonReader) throws IOException {\n"
        + "      if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "        jsonReader.nextNull();\n"
        + "        return null;\n"
        + "      }\n"
        + "      jsonReader.beginObject();\n"
        + "      String a = null;\n"
        + "      String b = null;\n"
        + "      String c = null;\n"
        + "      String d = null;\n"
        + "      String e = null;\n"
        + "      while (jsonReader.hasNext()) {\n"
        + "        String _name = jsonReader.nextName();\n"
        + "        if (jsonReader.peek() == JsonToken.NULL) {\n"
        + "          jsonReader.nextNull();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"a\": {\n"
        + "            a = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"c\": {\n"
        + "            c = (gson.getAdapter(java.lang.String.class)).read(jsonReader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            jsonReader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      jsonReader.endObject();\n"
        + "      return new AutoValue_Test(a, b, c, d, e);\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSources())
        .that(Arrays.asList(nullable, source))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }
}
